Copyright (C) 2013-2015, Filipe Brandao
Build (method = -2)
  #dp: 14854
  Step-3' Graph: 242 vertices and 3618 arcs (0.03s)
  Step-4' Graph: 138 vertices and 3410 arcs (0.03s)
  #V4/#V3 = 0.57
  #A4/#A3 = 0.94
Ready! (0.03s)
Optimize a model with 267 rows, 3411 columns and 9963 nonzeros
Found heuristic solution: objective 399
Presolve removed 2 rows and 17 columns
Presolve time: 0.02s
Presolved: 265 rows, 3394 columns, 9895 nonzeros
Variable types: 0 continuous, 3394 integer (232 binary)
Optimize a model with 265 rows, 3394 columns and 9895 nonzeros
Presolved: 265 rows, 3394 columns, 9895 nonzeros

Root barrier log...

Ordering time: 0.00s

Barrier statistics:
 AA' NZ     : 7.497e+03
 Factor NZ  : 1.279e+04 (roughly 2 MBytes of memory)
 Factor Ops : 9.782e+05 (less than 1 second per iteration)
 Threads    : 1

                  Objective                Residual
Iter       Primal          Dual         Primal    Dual     Compl     Time
   0   5.77279340e+04 -1.17709507e+05  1.83e+05 1.96e-01  2.34e+02     0s
   1   1.37628883e+04 -1.86207814e+04  3.00e+04 8.88e-16  3.76e+01     0s
   2   1.55643943e+03 -6.51890587e+03  2.04e+03 1.22e-15  3.32e+00     0s
   3   4.32167660e+02 -2.31424104e+03  8.33e+01 8.10e-15  4.62e-01     0s
   4   2.64058068e+02 -8.60301333e+02  1.12e+01 3.55e-15  1.69e-01     0s
   5   2.07526008e+02 -3.32806750e+02  4.71e+00 1.55e-15  8.00e-02     0s
   6   1.84136017e+02  1.77452997e+01  1.55e+00 7.84e-16  2.43e-02     0s
   7   1.69390884e+02  1.26429866e+02  2.23e-01 6.16e-16  6.24e-03     0s
   8   1.66728382e+02  1.65472515e+02  5.06e-13 5.99e-16  1.82e-04     0s
   9   1.66666730e+02  1.66665472e+02  1.48e-12 7.70e-16  1.82e-07     0s
  10   1.66666667e+02  1.66666665e+02  4.04e-13 7.29e-16  1.82e-10     0s

Barrier solved model in 10 iterations and 0.02 seconds
Optimal objective 1.66666667e+02


Root relaxation: objective 1.666667e+02, 2210 iterations, 0.03 seconds

    Nodes    |    Current Node    |     Objective Bounds      |     Work
 Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time

     0     0  166.66667    0    9  399.00000  166.66667  58.2%     -    0s
H    0     0                     168.0000000  166.66667  0.79%     -    0s
H    0     0                     167.0000000  166.66667  0.20%     -    0s

Explored 0 nodes (3291 simplex iterations) in 0.12 seconds
Thread count was 1 (of 4 available processors)

Optimal solution found (tolerance 0.00e+00)
Best objective 1.670000000000e+02, best bound 1.670000000000e+02, gap 0.0%
Preprocessing time: 0.03 seconds
Gurobi run time: 0.12 seconds
Total run time: 0.15 seconds
Objective: 167
Solution:
4 x [i=1, i=95, i=98]
2 x [i=2, i=100, i=114]
4 x [i=3, i=77, i=108]
3 x [i=4, i=73, i=110]
3 x [i=5, i=79, i=108]
3 x [i=6, i=82, i=101]
1 x [i=7, i=67, i=117]
6 x [i=8, i=89, i=99]
1 x [i=8, i=126, i=129]
1 x [i=9, i=74, i=104]
2 x [i=9, i=95, i=96]
1 x [i=10, i=62, i=117]
2 x [i=10, i=102, i=103]
1 x [i=11, i=57, i=120]
4 x [i=11, i=65, i=112]
1 x [i=11, i=68, i=122]
1 x [i=11, i=79, i=123]
2 x [i=12, i=60, i=116]
1 x [i=12, i=67, i=116]
1 x [i=13, i=57, i=118]
2 x [i=13, i=86, i=93]
1 x [i=14, i=57, i=117]
2 x [i=15, i=68, i=104]
1 x [i=16, i=77, i=122]
2 x [i=17, i=66, i=117]
2 x [i=18, i=52, i=118]
4 x [i=18, i=59, i=111]
2 x [i=19, i=43, i=129]
3 x [i=20, i=75, i=92]
1 x [i=20, i=83, i=84]
3 x [i=20, i=83, i=87]
3 x [i=21, i=42, i=125]
1 x [i=21, i=84, i=96]
2 x [i=22, i=53, i=114]
6 x [i=23, i=48, i=121]
2 x [i=24, i=51, i=113]
1 x [i=24, i=53, i=111]
1 x [i=25, i=48, i=122]
5 x [i=25, i=55, i=115]
2 x [i=26, i=45, i=117]
2 x [i=26, i=53, i=109]
3 x [i=27, i=37, i=128]
3 x [i=28, i=69, i=91]
3 x [i=29, i=50, i=109]
4 x [i=30, i=70, i=90]
1 x [i=31, i=69, i=123]
1 x [i=31, i=84, i=88]
3 x [i=32, i=52, i=104]
1 x [i=33, i=36, i=127]
1 x [i=33, i=40, i=124]
4 x [i=33, i=46, i=127]
3 x [i=34, i=76, i=78]
2 x [i=35, i=36, i=122]
1 x [i=35, i=74, i=78]
1 x [i=35, i=76, i=78]
5 x [i=38, i=43, i=107]
1 x [i=38, i=52, i=98]
1 x [i=39, i=54, i=97]
1 x [i=40, i=41, i=116]
1 x [i=40, i=54, i=125]
2 x [i=40, i=74, i=82]
1 x [i=44, i=56, i=93]
1 x [i=45, i=54, i=123]
2 x [i=45, i=71, i=81]
1 x [i=46, i=70, i=122]
3 x [i=47, i=68, i=80]
4 x [i=49, i=58, i=81]
2 x [i=57, i=85, i=124]
3 x [i=61, i=64, i=72]
4 x [i=61, i=67, i=72]
2 x [i=62, i=63, i=72]
1 x [i=62, i=63, i=78]
2 x [i=94, i=106, i=107]
1 x [i=105, i=117, i=122]
1 x [i=105, i=119]
2 x [i=105, i=119, i=119]
3 x [i=120, i=126, i=126]
